hist(salaries$salary,
main="Histogram of Salaries of professors in Disciplines A and B",
col="steelblue3",
xlab="Salary, dollars")
hist(salaries$salary,
main="Histogram of Salaries of professors in Disciplines A and B",
col="steelblue3",
xlab="Salary, dollars",
prob=TRUE)
rug(salaries$salary)
lines(density(salaries$salary), col="darkblue", lwd=2)
pairs( salaries[ ,c("yrs.since.phd", "yrs.service","salary") ] )
pairs( ~ yrs.since.phd + yrs.service + salary,
data = salaries)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs( ~ yrs.since.phd + yrs.service + salary,
data = salaries,
lower.panel = panel.smooth,
upper.panel = panel.cor)
par.save <- par()  # save current graphics parameters
print( par() )
par( mfrow = c(1,2) )
pie( ranks, labels = labels, col = mycol , init.angle = 90, main = "Teaching Faculty")
# second graph
b<-barplot(table(salaries$rank),
col=c("steelblue4","firebrick","forestgreen"),
main = "Professor Ranks",
names.arg = c("Associate Professor", "Assistant Professor", "Professor"),
ylim = c(0, max(table(salaries$rank)) * 1.25),
axes=FALSE)
text(b,table(salaries$rank),table(salaries$rank), pos=3)
mtext("Disciplines A and B")
par ( mfrow = c(1,1) )
ggplot(salaries, aes(x=factor(1), fill=rank)) +
geom_bar(width=1)
ggplot(salaries, aes(x=factor(1), fill=rank)) +
geom_bar(width=1) +
coord_polar("y") +
ggtitle("Teaching Faculty")
ggplot(salaries, aes(x=factor(1), fill=rank)) +
geom_bar(width=1) +
coord_polar("y") +
ggtitle("Teaching Faculty") +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
plot.title=element_text(size=14,face="bold")
)
ggplot(salaries, aes( yrs.service, salary)) + geom_point()
ggplot(salaries, aes( yrs.service, salary)) +
geom_point() +    # type of geom objects
theme_bw() +      # theme
ggtitle(" Salary analysis")   # plot title
ggplot(salaries, aes( yrs.service, salary)) +
geom_point( aes(color = factor(rank)  ), size=5) +    # type of geom objects
ggtitle(" Salary analysis") +  # plot title
theme_bw( ) +      # theme
theme ( plot.title=element_text(size=14,face="bold" ) )
#Add a regression line to the plot
ggplot(salaries, aes( yrs.service, salary)) +
geom_point( aes(color = factor(rank)  ), size=5) +    # type of geom objects
ggtitle(" Salary analysis") +  # plot title
geom_smooth() +
theme_bw( ) +      # theme
theme ( plot.title=element_text(size=14,face="bold" ) )
ggplot(salaries, aes( yrs.service, salary)) +
geom_point( aes(color = factor(rank)  ), size=5) +    # type of geom objects
ggtitle(" Salary analysis") +  # plot title
geom_smooth( method='lm' , col = "black") +
theme_bw( ) +      # theme
theme ( plot.title=element_text(size=14,face="bold" ) )
ggplot(salaries, aes( x=discipline, y=salary ) ) + geom_boxplot()
ggplot(salaries, aes( x=discipline, y=salary ) ) +
geom_boxplot() +
geom_jitter(width = 0.2)
ggplot(salaries, aes( x=rank, y=salary) ) +
geom_boxplot( varwidth = TRUE ) + #width is proportional to the square roots of the number of observations
geom_jitter(width = 0.2) +
ggtitle(" Salary analysis") +
coord_flip() +
theme ( plot.title=element_text(size=14,face="bold" ) )
ggplot(salaries, aes(x=salary)) + geom_histogram()
ggplot(salaries, aes(x=salary)) + geom_histogram(binwidth=10000)
ggplot(salaries, aes(x=salary)) +
geom_histogram(binwidth=10000,
color="black", fill="white")
ggplot(salaries, aes(x=salary)) +
geom_histogram(binwidth=10000,
color="black", fill="white", aes(y=..density..)) +
geom_density(alpha=.2, fill="darkorange")
## -------------------------------------------- ##
##
##   Programming in R
##
## Research Computing Services
## Katia Oleinik
## --------------------------------------------- ##
#
# Read data files
flights <- read.csv("http://scv.bu.edu/examples/r/tutorials/flights.csv",
## -------------------------------------------- ##
##
##   Programming in R
##
## Research Computing Services
## Katia Oleinik
## --------------------------------------------- ##
#
# Read data files
flights <- read.csv("http://scv.bu.edu/examples/r/tutorials/flights.csv",
stringsAsFactors = FALSE)
#
#Alternatively use readr package or data.table package to read large data files
\c
# Read data files
flights <- read.csv("http://scv.bu.edu/examples/r/tutorials/flights.csv",
stringsAsFactors = FALSE)
#
library(microbenchmark)
microbenchmark({
#create a new variable in the dataset - full_date
flights$full_date <- rep( NA,nrow(flights) ) # create new column (variable) and pre-allocate to NA
# Loop through each row in the dataset
for ( i in 1: 10 ){    # we should loop from 1 to nrow(flights),
# but it is very slow for the large dataset- see more efficient approach bellow
flights$full_date[i] <- paste(flights$year[i], flights$month[i], flights$day[i], sep="/")
}
}, {
# Much more efficient approach: vectorize
flights$full_date <- paste(flights$year, flights$month, flights$day, sep="/")
})
apply(flights[,c(1:3)], 1, paste, sep="/")
full_date2 <- apply(flights[,c(1:3)], 1, paste, sep="/")
head(full_date2)
full_date2 <- apply(flights[,c(1:3)], 1, paste)
head(full_date2)
library(microbenchmark)
microbenchmark({
#create a new variable in the dataset - full_date
flights$full_date <- rep( NA,nrow(flights) ) # create new column (variable) and pre-allocate to NA
# Loop through each row in the dataset
for ( i in 1: 10 ){    # we should loop from 1 to nrow(flights),
# but it is very slow for the large dataset- see more efficient approach bellow
flights$full_date[i] <- paste(flights$year[i], flights$month[i], flights$day[i])
}
}, {
# Much more efficient approach: vectorize
flights$full_date <- paste(flights$year, flights$month, flights$day, sep="/")
})
View(full_date2)
Q
fd_rnge <- lapply (flights$full_date , range)
fd_rnge <- apply (flights$full_date, 2,range)
dim(flights$full_date)
fd_rnge <- apply (as.array(flights$full_date), 2,range)
head(flights$full_date)
fd_rnge <- apply (as.array(flights$full_date), 2,range, na.rm=TRUE)
fd_rnge <- apply (as.matrix(flights$full_date, 1,1), 2,range, na.rm=TRUE)
View(fd_rnge)
unique(flights$full_date)
pply (flights[, 1:3] , 2, range)
apply (flights[, 1:3] , 2, range)  # flight[, 1:3] - only take first three columns
flights$full_date <- paste(flights$year, flights$month, flights$day, sep="/")
unique(flights$full_date)
fd_rnge <- apply (flights$full_date, 2,range)
fd_rnge <- apply (as.matrix(flights$full_date,1), 2,range)
flights$full_date2  <- sprintf("%4d\/%2d\/%2d", flights$year, flights$month, flights$day)
flights$full_date2  <- sprintf("%4d/%2d/%2d", flights$year, flights$month, flights$day)
head(flight$full_date2)
head(flights$full_date2)
flights$full_date2  <- sprintf("%04d/%02d/%02d", flights$year, flights$month, flights$day)
head(flights$full_date2)
fd_range <- apply (as.matrix(flights$full_date,1), 2,range)
print(fd_range)
fd_range2 <- apply (as.matrix(flights$full_date2,1), 2,range)
print(fd_range2)
apply(flights[ ,c(5,7)], 2, var, na.rm=TRUE)
microbenchmark({
cm_mean <- colMeans(flights[ ,c(5,7)],na.rm=TRUE)
#print(cm_mean)
}, {
apply_mean <- apply(flights[ ,c(5,7)], 2, mean, na.rm=TRUE)
#  print(apply_mean)
})
microbenchmark({
cm_mean <- colMeans(flights[ ,c(5,7)],na.rm=TRUE)
print(cm_mean)
}, {
apply_mean <- apply(flights[ ,c(5,7)], 2, mean, na.rm=TRUE)
print(apply_mean)
})
data.list <- list(dep.delay = flights$dep_delay,arr.delay = flights$arr_delay)
str(data.list)
data.list2 <- list(ua.dep.delay = flights$dep_delay[flights$carrier=='UA'],
ua.arr.delay = flights$arr_delay[flights$carrier=='UA'],
aa.dep.delay = flights$dep_delay[flights$carrier=='AA'],
aa.arr.delay = flights$arr_delay[flights$carrier=='AA'])
str(data.list2)
delays <- lapply( data.list  , mean, na.rm=TRUE)
delays2 <- lapply( data.list2  , mean, na.rm=TRUE)
head(data.list[[1]])
head(delays[[1]])
print(delays)
unlist(delays)
str(unlist(delays))
head(data.list[[1]])
head(delays[[1]])
print(delays)
unlist(delays).names
sapply( data.list , mean, na.rm=TRUE )
mF <- function(x) {
m<-mean(x, na.rm=TRUE)
s <- sd(x, na.rm=TRUE)
return ( c(m, s))
}
sapply( data.list , mF )
?c
str(c(1:5, 10.5, "next"))
ans <- sapply( data.list , mF )
rownames(ans) <- c("mean", "std")
View(ans)
ans
?tapply
#subset:
library(microbenchmark)
microbenchmark({}
UA.delays <- subset(flights, carrier=="UA", select=c(dep_delay, arr_delay))
},{
# could be done as follows as well:
UA.delays2 <- flights[flights$carrier=='UA',][c("dep_delay", "arr_delay")]
})
#subset:
library(microbenchmark)
microbenchmark({
UA.delays <- subset(flights, carrier=="UA", select=c(dep_delay, arr_delay))
},{
# could be done as follows as well:
UA.delays2 <- flights[flights$carrier=='UA',][c("dep_delay", "arr_delay")]
})
?dplyr
library(dplyr)
?dplyr
?seq
help.search("standard deviation")
try(log())
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
detach("tinyverse", unload=TRUE)
detach("package:tinyverse", unload=TRUE)
detach("package:tidyverse", unload=TRUE)
?filter
library(ggplot2)
library(RColorBrewer)
#Read Salary dataset
salaries <- read.csv( "http://scv.bu.edu/examples/r/tutorials/Salaries.csv")
#Explore the dataset
head(salaries)
str(salaries)
summary(salaries)
library(ggplot2)
library(RColorBrewer)
#Read Salary dataset
salaries <- read.csv( "http://scv.bu.edu/examples/r/tutorials/Salaries.csv")
#Explore the dataset
head(salaries)
str(salaries)
summary(salaries)
ranks <- table(salaries$rank)
pie(ranks)
mycol <- c("darkorange","forestgreen","steelblue4")
pie(ranks,
labels = names(ranks),
col = mycol,
main = "Teaching Faculty")
names(ranks)
percent = round(100 * ranks / sum(ranks), 1)
rank.names <- c("Associate Professor", "Assistant Professor", "Professor")
labels <- paste( rank.names, " ",percent, "%",     sep="")
pie( ranks,
labels = labels,
col = mycol ,
init.angle = 90,
main = "Teaching Faculty")
#Add some text to the graph
text(x=0.25,y=-1.0,
labels = "Source: University Administration",
pos = 4,
cex=0.75)
x <- 1:10
y1 <- log(x)
y2 <- sqrt(x)
# First attempt to draw the points:
plot(x,y1)
lines(x,y2)
plot(x, y1,                                          # specify the coordinates
type = "b",                                     # type of the plot
ylim = c(min(c(y1,y2)), max(c(y1,y2))),         # set the axis limits
main = "Logarithm and Square root functions",   # title
ylab = "y",     #                               # y label
col = "darkgreen",                              # line color
lwd = 2,                                        # line tickness
pch=15,                                         # symbol to display the point
cex.lab=1.5,                                    # size of the font used for labels
font.lab = 3,                                   # font type
cex.main = 2)                                   # size of the font used for the title
#Additional line
lines(x,y2,                        # coordinates
col = "steelblue",           # color
lwd =2,                      # line width
type="b",                    # line type (b - both, lines and points)
pch=19,                      # symbol used to display points
cex.lab=1.5)                 # font size for labels
abline(h = seq(0,3,by=0.5), v = c(0:10), col='lightgray',lty="dotted")
#Add legend
legend("topleft",                             # position
col=c("darkgreen","steelblue"),        # colors
lty=1,                                 # draw line
pch=c(15,19),                          # draw points
cex=1.5,                               # text size
legend=c("logarithm","square root"))   # text
# Add text to the graph
text(x = 6, y = sqrt(6), pos = 2, labels=expression(paste("y = ",sqrt(x))), cex=2, offset=0.75)
text(x = 6, y = log(6),  pos = 2, labels=expression(paste("y = ",ln(x))),   cex=2, offset=0.75)
b<-barplot(ranks,
col = mycol,
main = "Teaching Faculty",
sub = "Source: University Administration",
names.arg = rank.names,
ylim = c(0, max(ranks) * 1.1),
axes = FALSE)
text(b,ranks,
labels = ranks,
pos = 3)
barplot(c(1:10), col=c(1:10))
#list colors in the current palette:
palette()
pie(rep(1,length(palette())),
col=palette())
#some available palettes:
#   rainbow(), heat.colors(), terrain.colors(), topo.colors(), cm.colors(), gray.colors()
num.col=15
barplot(c(1:num.col), col=rainbow(num.col))
barplot(c(1:num.col), col=heat.colors(num.col))
barplot(c(1:num.col), col=terrain.colors(num.col))
barplot(c(1:num.col), col=topo.colors(num.col))
barplot(c(1:num.col), col=cm.colors(num.col))
barplot(c(1:num.col), col=gray.colors(num.col))
library(RColorBrewer)
display.brewer.all()
barplot(c(1:8), col=brewer.pal(8,"Dark2") )
barplot(c(1:9), col=brewer.pal(9,"Set1") )
boxplot(salaries$salary)
#let's display 2 boxplots: one for male and one for female names
boxplot( formula = salary ~ discipline,
data = salaries,
names = c("A","B"),
col = c("gold","forestgreen"),
horizontal = TRUE,
main = "Salary range for Disciplines A and B")
legend("topright",
legend=c("A","B"),
pch=15,
col = c("gold","forestgreen"))
?points
plot(c(-1, 26), 0:1, type = "n", axes = FALSE, xlab="", ylab="")
text(0:25, 0.6, 0:25, cex=0.75)
points(0:25, rep(0.5, 26), pch = 0:25, bg = "grey")
levels(salaries$rank)
col3 <- c("steelblue4","firebrick","forestgreen")
cols <- col3 [ as.numeric(salaries$rank) ]
plot(x = salaries$yrs.service,
y = salaries$salary,
pch = 19,
main = "Analysis of dependency of 2 variables",
xlab = "Years of Service",
ylab = "Salary",
col = cols,
cex=1.5)
lm.fit <- lm(salary ~ yrs.service, data = salaries)
abline(lm.fit, lty = 4, lwd = 2, col="darkgray")
legend("topleft",levels(salaries$rank),fill=col3 )
eq <- substitute(italic(salary) == a + b %.% italic(yrs.service)*","~~italic(r)^2~"="~r2,
list(a = format(coef(lm.fit)[1], digits = 2),
b = format(coef(lm.fit)[2], digits = 2),
r2 = format(summary(lm.fit)$r.squared, digits = 3)))
#R-squared: what proportion of the variation in the outcome can be explained by the covariates/predictors
# if R-squared is low, than the outcome is poorly predicted by the covariates/
text(15,170000,labels=as.expression(eq), pos=4, cex=.8 )
?substitute
eq <- substitute(italic(salary) == a + b %.% italic(yrs.service)*","~~italic(r)^2~"="~r2,
list(a = format(coef(lm.fit)[1], digits = 2),
b = format(coef(lm.fit)[2], digits = 2),
r2 = format(summary(lm.fit)$r.squared, digits = 3)))
#R-squared: what proportion of the variation in the outcome can be explained by the covariates/predictors
# if R-squared is low, than the outcome is poorly predicted by the covariates/
text(15,170000,labels=as.expression(eq), pos=4, cex=.8 )
hist(salaries$salary)
hist(salaries$salary,
main="Histogram of Salaries of professors in Disciplines A and B",
col="steelblue3",
xlab="Salary, dollars")
# Same plot with probability along the y axes
hist(salaries$salary,
main="Histogram of Salaries of professors in Disciplines A and B",
col="steelblue3",
xlab="Salary, dollars",
prob=TRUE)
#Add rugplot
rug(salaries$salary)
#Add density line
lines(density(salaries$salary), col="darkblue", lwd=2)
# Delays per airport
pairs( salaries[ ,c("yrs.since.phd", "yrs.service","salary") ] )
#An alternative way using formula
pairs( ~ yrs.since.phd + yrs.service + salary,
data = salaries)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs( ~ yrs.since.phd + yrs.service + salary,
data = salaries,
lower.panel = panel.smooth,
upper.panel = panel.cor)
par( mfrow = c(1,2) )  # 1 row and 2 columns
# first graph
pie( ranks, labels = labels, col = mycol , init.angle = 90, main = "Teaching Faculty")
# second graph
b<-barplot(table(salaries$rank),
col=c("steelblue4","firebrick","forestgreen"),
main = "Professor Ranks",
names.arg = c("Associate Professor", "Assistant Professor", "Professor"),
ylim = c(0, max(table(salaries$rank)) * 1.25),
axes=FALSE)
text(b,table(salaries$rank),table(salaries$rank), pos=3)
mtext("Disciplines A and B")
par ( mfrow = c(1,1) )
par()$mai
par( mfrow = c(1,2), mai=c(1.36,1.093,2,0.56) )  # 1 row and 2 columns
# first graph
pie( ranks, labels = labels, col = mycol , init.angle = 90, main = "Teaching Faculty")
# second graph
b<-barplot(table(salaries$rank),
col=c("steelblue4","firebrick","forestgreen"),
main = "Professor Ranks",
names.arg = c("Associate Professor", "Assistant Professor", "Professor"),
ylim = c(0, max(table(salaries$rank)) * 1.25),
axes=FALSE)
text(b,table(salaries$rank),table(salaries$rank), pos=3)
mtext("Disciplines A and B")
par ( mfrow = c(1,1) )
?mtext
par( mfrow = c(1,2), mai=c(1.36,1.093,2,0.56) )  # 1 row and 2 columns
# first graph
pie( ranks, labels = labels, col = mycol , init.angle = 90, main = "Teaching Faculty")
# second graph
b<-barplot(table(salaries$rank),
col=c("steelblue4","firebrick","forestgreen"),
main = "Professor Ranks",
names.arg = c("Associate Professor", "Assistant Professor", "Professor"),
ylim = c(0, max(table(salaries$rank)) * 1.25),
axes=FALSE)
text(b,table(salaries$rank),table(salaries$rank), pos=3)
mtext("Disciplines A and B", outer=TRUE)
par ( mfrow = c(1,1) )
?mtext
par( mfrow = c(1,2), mai=c(1.36,1.093,2,0.56) )  # 1 row and 2 columns
# first graph
pie( ranks, labels = labels, col = mycol , init.angle = 90, main = "Teaching Faculty")
# second graph
b<-barplot(table(salaries$rank),
col=c("steelblue4","firebrick","forestgreen"),
main = "Professor Ranks",
names.arg = c("Associate Professor", "Assistant Professor", "Professor"),
ylim = c(0, max(table(salaries$rank)) * 1.25),
axes=FALSE)
text(b,table(salaries$rank),table(salaries$rank), pos=3)
mtext("Disciplines A and B", outer=TRUE, line=1)
par ( mfrow = c(1,1) )
par(par.save)
library(tidyr)
patient <- read_excel("http://scv.bu.edu/examples/r/tutorials/MedData.xlsx",
sheet = "PatientData")
install.packages("tidyverse")
library(tidyverse)
library(lubridate)
patient <- read_excel("MedData.xlsx", sheet = "PatientData")
library(readxl)
library(readxl)
visit <- read_excel("MedData.xlsx", sheet = "VisitData")
patient <- read_excel("MedData.xlsx", sheet = "PatientData")
